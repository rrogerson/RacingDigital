@page "/"
@using RacingDigital.WebUI.Models
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject HttpClient Http
@inject ApiSettings ApiSettings
@inject IJSRuntime JS
@implements IDisposable

<PageTitle>@pageTitle</PageTitle>

<h1>@pageTitle</h1>

@if (raceResults is not null && raceResults.Any())
{
    <div style="overflow-x: auto;">
        <table id="raceTable" class="table table-striped table-hover" style="min-width: 1200px;">
         <thead>
              <tr>   
                <th></th>
                <th>
                    Race
                </th>
                <th>Race Date</th>
                <th>Race Time</th>
                <th>Race Course</th>
                <th>Distance</th>
                <th>Jockey</th>
                <th>Trainer</th>
                <th>Horse</th>
                <th>Finishing Position</th>
                <th>Distance Beaten</th>
                <th>Time Beaten</th>
             
            </tr>
        </thead>
        <tbody>
            @foreach (var item in raceResults)
            {
                    <tr>
                        <td class="text-decoration-underline" @onclick="() => ToggleRow(item.Id)">Notes</td>
                        <td >@item.Race</td>
                    <td>@item.RaceDate</td>
                    <td>@item.RaceTime</td>
                    <td>@item.Racecourse</td>
                    <td>@item.RaceDistance</td>
                    <td>@item.Jockey</td>
                    <td>@item.Trainer</td>
                    <td>@item.Horse</td>
                    <td>@item.FinishingPosition</td>
                    <td>@item.DistanceBeaten</td>
                    <td>@item.TimeBeaten</td>
                 
                </tr>
                    @if (expandedId == item.Id)
                    {
                        <tr>
                    <td colspan="12">
                        <textarea id="notesInput" class="form-control m-2" rows="3" @bind="notesText"></textarea>

                        <button class="btn btn-primary" @onclick="() => AddNote(item.Id)">Add Notes</button>

                    </td>
                        </tr>
                    <tr class="expanded-row">
                       
                            <td colspan="12">
                                <div class="details-container ms-3 me-3">
                                    @if (notes == null || !notes.Any())
                                    {
                                        <p class="fw-bold">No records found.</p>
                                    }
                                    else
                                    {
                                       <table class="table table-striped table-hover">
                                            <tbody>
                                                @foreach (var noteItem in notes)
                                                {
                                                    <tr>
                                                        <td>@noteItem.NoteText</td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
            }
        </tbody>
    </table> 
    </div>
}

@code {

    private string pageTitle = "Racing Digital Race Results";

    private List<RaceResults> raceResults = new List<RaceResults>();
    private List<Notes> notes = new List<Notes>();

    private bool _initialized;
    private int? expandedId = null;

    private string notesText = "";

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (!_initialized && raceResults is not null && raceResults.Any())
    //     {
    //         _initialized = true;
    //         await JS.InvokeVoidAsync("initializeDataTable", "raceTable");
    //     }
    // }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadFromApi();

        }

        catch (Exception ex)
        {
            //TO DO Error handling
        }

    }

    private async Task LoadFromApi()
    {
        raceResults = await Http.GetFromJsonAsync<List<RaceResults>>($"{ApiSettings.RacingDigitalWebAPI}Races");
    }

    private async Task ToggleRow(int raceId)
    {
        if (expandedId == raceId)
        {
            expandedId = null; // Collapse if already expanded
        }
        else
        {
            notes = await Http.GetFromJsonAsync<List<Notes>>($"{ApiSettings.RacingDigitalWebAPI}Races/GetNotes/{raceId}");

            expandedId = raceId; // Expand selected row
        }


    }

    private async Task AddNote(int raceId)
    {
        var note = new Notes()
            {
                RaceId = raceId,
                NoteText = notesText
            };
        var response = await Http.PostAsJsonAsync($"{ApiSettings.RacingDigitalWebAPI}Races/AddNote", note);
        notes = await Http.GetFromJsonAsync<List<Notes>>($"{ApiSettings.RacingDigitalWebAPI}Races/GetNotes/{raceId}");
        notesText = "";
    }


    public void Dispose()
    {
        _initialized = false;
    }

}

